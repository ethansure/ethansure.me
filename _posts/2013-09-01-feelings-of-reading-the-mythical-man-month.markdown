---
layout: post
title: 读《人月神话》有感
date: 2013-09-01 21:16
author: "ethansure"
header-img: "img/post-bg-01.jpg"
---

记得第一次读《人月神话》是大一下学期，那时候已经对软件这东西的热情减半不过好奇未减。刚进入软件工程专业时，涉猎了不少书相关书籍，但也都是浅浅一读，并没有经过多少的思考。那时候总以为软件是个无所不能的东西，正如毛主席所说“人有多大胆，地有多大产”，如此乐观地对待软件这个行业也许也是我选择继续留在软件学院的原因之一。当我第一次读了《人月神话》我发现实际情况比我想象的糟糕许多，感觉这作者是持一种比较悲观的态度来看待软件这个行业，作者笔下无处不是各种失败的例子，渐渐的我开始反思自己对软件行业的看法。虽然该书浇灭了我许多的热情，但是也是让我重新开始真正认识软件。

经过了两年多的学习，做过了不少的个人项目和小团队项目，我想我也可以发表一些对于软件行业的看法了。恰好软工课程需要写一篇读后感，我重新购置了一本32周年纪念版的《人月神话》，再一次思考Frederick文中提到的各种论点和事例。

首先我更加地理解了本书的定位，这是一本提供软件工程管理指导的书，而并非提供诸多实践标准，它给读者的是一种思考。

Frederick在书中提到的没有银弹让我影响非常深刻，也正是这个原因让我曾一度觉得软件这个行业必须有个深刻的变革才能发展下去。这里的银弹值的是提高软件生产效率、可靠性和简洁性的方法。但是如今再想想作者的观点，其实不然，我个人认为Frederick和《没有银弹》的作者希望给我们传递的是，不要追求过分完美的解决方案，在软件这个多变的行业，一切都是不匹配的，如果当我们硬把银弹作为软件行业的目标，这可能会导致灾难。Frederick在文中指出之所以没有银弹，是由于软件中的四个特性所决定的，分别是复杂度，一致性，可变性以及不可见性。就复杂度而言，计算机行业曾经尝试着解决它，并且也取得了一定的成功，高级语言的发明，让程序的数据结构和逻辑性更容易让人理解及编写。但是这对于解决软件的复杂度只是微小的一部分，软件如何设计，由哪些人设计也是软件复杂性的体现。由于软件复杂性的存在，对于管理来说也是挑战，因此整个项目的个因素间相互影响会直接影响到软件产品的质量。另外软件程序会因程序员的不同而造成程序的不一致性，即使有良好的设计的文档，但是程序员拥有着不同的思维和习惯，或多或少的将自己的惯性代码加入到项目代码中。对于一个项目的软件代码来说，不同的部分，拥有的代码也是不一致的，一旦相同，重构代码是非常必须的，我们需要将他们合并成为一个函数或者一个功能块。对于最后的两个软件特性较好理解，可变性值的是软件功能会随着项目的进行而有较大的变动，这样的变动来自于客户的需求，市场的需求，我们不希望把重复的功能或者过期的功能加入到软件产品里面。不可见性则是指软件的代码逻辑以及代码的结构我们是不能直接识别的，我们需要借助语言和图表进行描绘，但是这个过程中，由于不同的绘制人员会导致其中的差异性存在。

软件行业中的每一个人是多么希望有银弹的存在，特别是编程人员，如果真的有它的存在，将会形成一套固定的管理机制和项目开发计划，这样他们就可以拜托于项目经理或者产品经理的使唤。但是我们可以看到软件的四个较生活中工程项目产品有差异的四个特性，他们都是依附于特定的软件产品而存在的。一旦项目的功能改变，这四个特性就会项目影响，那所采用的管理方法和开发流程必然不同。可能有人会说，我们可以把软件构件化，每个功能作为一个单独的小软件，当碰到特定业务需求的时候将构件组合起来，形成一个具有不一样功能逻辑的软件。这样想的人多半是受限于传统工业工程化的影响，例如汽车的制造，房屋的建造。汽车一旦型号定制好，就会有特定的模具来制造相同的部件，这样重复性的工作之后，再将其组装起来。但是是否想过汽车的形状和功能是长期稳定不变的，而软件内部的改变是时时刻刻的，而且软件并非需要重复性的组合，因为一旦软件产品制作好之后，只用把他们放在服务器，或者为客户提供副本。所以汽车制造的生产模式是为了节约后期组装时间，而软件并不需要，所以软件组合对于软件的生产效率提高并不大。我们必须考虑到其实特定功能的软件组件其实存在的可能性非常小，因为随着程序语言的更新和软件技术的快速升级，这些所谓的功能部件将不再适用。即使我们假设这些组件可以在较长时间内没有改变，然后可以将它们利用起来组装成新的产品，虽然结果是实现了功能，但是我们却抛弃了软件的简洁性。所以我本人不看好软件的工业化，我相信很长一段时间软件将处于定制化的阶段。

虽然我们在软件程序实施上并为找到更好的方法。我们可以从管理上入手。就Frederick在书中提到的外科手术队伍式的开发团队将是最适合进行项目开发的组合。原因是队伍中将有一个人主导着事件的进行，其它人则是配合其实现细节。我个人认为这样形式的团队对于3－5个人是比较适合的，而且也特别适合敏捷开发。虽然说敏捷开发追求的是一种平等网状的团队组织，但是有一个核心成员来掌控以及协调大家工作是非常重要的，较一般的开发团队相比，弱化了负责人的地位，scrum master最好参与到项目中，参与设计和架构，在合适的适合一定要帮助团队成员解决困难。不过在书中也有提到软件产品的设计最好是两个人，这样才能保证产品功能的稳定性。在敏捷开发团队中，可以有master选择其中一名擅长于架构或者设计的人员与其一同工作，这样既不会破坏团队组织结构，也更能保证软件的成功。

最后我想说Frederick其实对软件行业充满了信心，同时在纪念版中，作者们明显的倾向与敏捷开发。因为它将软件的复杂性分布与每一个迭代，而迭代间不存在浪费的，就不如可以不需要原型，而将第一迭代看作传统模型，而它还可以在之后的迭代中使用。由于敏捷开发的时间周期较短，以及开发的流程，如每日会议，将很好的应对软件的可变性。对于软件的不一致性和不可见性，通过不断的交流和高效而非累赘的文档来攻克其中的难题。

软件行业无限好，只待我等创世界。
